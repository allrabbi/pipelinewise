version: '3'
services:
  ### Primary container with PipelineWise CLI
  pipelinewise:
    image: python:3.8-slim-buster
    container_name: pipelinewise_dev
    working_dir: /opt/pipelinewise
    entrypoint: /opt/pipelinewise/dev-project/entrypoint.sh
    env_file:
      - .env
    environment:
      PATH: ${PIPELINEWISE_HOME}/.virtualenvs/pipelinewise/bin:${PATH}
    volumes:
      - ../:/opt/pipelinewise
      # don't create container specific .virtualenvs files on host
      - /opt/pipelinewise/dev-project/.virtualenvs/
      # mount pipelinewise pipe configuration directory to host for ease of troubleshooting
      - .pipelinewise:/root/.pipelinewise

    # Build only when test databases are ready
    depends_on:
      - db_postgres_source
      - db_postgres_dwh
    networks:
      - pipelinewise_network

  ### TAP (Data source) containers
  # PostgreSQL service container used as test source database
  # Using Debezium image with wal2json plugin for logical decoding
  db_postgres_source:
    build:
      context: ./pg
      dockerfile: Dockerfile
    container_name: pipelinewise_dev_postgres_source
    # Making some logical decoding adjustments
    command: -c "wal_level=logical" -c "max_replication_slots=5" -c "max_wal_senders=5"
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: pipelinewise
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: postgres_source_db
    networks:
      - pipelinewise_network

  

  ### Target containers
  # PostgreSQL service container used as test target database
  db_postgres_dwh:
    image: postgres:11.4
    container_name: pipelinewise_dev_postgres_dwh
    ports:
      - 5433:5433
    environment:
      POSTGRES_USER: pipelinewise
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: postgres_dwh
    networks:
      - pipelinewise_network

networks:
  pipelinewise_network:
    ipam:
      driver: default
      config:
        - subnet: 192.168.56.0/24
